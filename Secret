Secret

• ConfigMap: 컨테이너구성정보를한곳에모아서관리
• Secret : 컨테이너가사용하는password, auth token, sshkey와같은중요한정보를저장하고민감한구성정보를 base64로 인코딩해서한곳에모아서관리
• 민감하지않은일반설정파일configMap을사용하고민감한데이터는secret을사용
$ kubectlcreate secret genericeshop-secret \
--from-literal=PASSWORD=fastcam\
--from-literal=SCORE=90
-> 동작되는 컨테이너에게 전달해 주기위해 주로 사용
-> base64로 인코딩 되긴 했지만 보안적으로 유리한게 아니고 단순히 인코딩된 정보기 때문에 디코딩 하면 정보가 다시 노출됨

[user@console ~]$ kubectl create secret generic eshop --from-literal=DBNAME=mysql --from-literal=USER=admin
secret/eshop created
[user@console ~]$ kubectl get secrets
NAME                  TYPE                                  DATA   AGE
default-token-gvdn7   kubernetes.io/service-account-token   3      239d
eshop                 Opaque                                2      15s
[user@console ~]$ kubectl describe secrets eshop
Name:         eshop
Namespace:    default
Labels:       <none>
Annotations:  <none>

Type:  Opaque

Data
====
DBNAME:  5 bytes
USER:    5 bytes
[user@console ~]$ kubectl get secrets eshop -o yaml
apiVersion: v1
data:
  DBNAME: bXlzcWw=
  USER: YWRtaW4=
kind: Secret
metadata:
  creationTimestamp: "2022-09-20T08:29:15Z"
  name: eshop
  namespace: default
  resourceVersion: "754403"
  uid: d330d241-8d64-4917-a6c5-f273ee3be7a8
type: Opaque


◾ 작업클러스터: k8s
Name: super-secret
password: bob
1. Create a pod named pod-secrets-via-file, using the redisImage, which mounts a secret named super-secret at/secrets.
2. Create a second pod named pod-secrets-via-env, using the redisImage, which exports password as CONFIDENTIAL

1.
[user@console ~]$ kubectl create secret generic super-secret --from-literal=Password=bob
secret/super-secret created
[user@console ~]$ kubectl get secret
NAME                  TYPE                                  DATA   AGE
default-token-gvdn7   kubernetes.io/service-account-token   3      239d
eshop                 Opaque                                2      3h
super-secret          Opaque                                1      8s
[user@console ~]$ kubectl describe secrets super-secret
Name:         super-secret
Namespace:    default
Labels:       <none>
Annotations:  <none>

Type:  Opaque

Data
====
Password:  3 bytes
[user@console ~]$ kubectl run pod-secrets-via-file --image=redis --dry-run=client -o yaml > pod-secrets-via-file.yaml
-> run은 한개의 pod 생성 명령어
[user@console ~]$ cat pod-secrets-via-file.yaml
apiVersion: v1
kind: Pod
metadata:
  creationTimestamp: null
  labels:
    run: pod-secrets-via-file
  name: pod-secrets-via-file
spec:
  containers:
  - image: redis
    name: pod-secrets-via-file
    volumeMounts:
    - name: foo
      mountPath: "/secrets"
  volumes:
  - name: foo
    secret:
      secretName: super-secret
      optional: false
[user@console ~]$ kubectl apply -f pod-secrets-via-file.yaml
pod/pod-secrets-via-file created
[user@console ~]$ kubectl get pods pod-secrets-via-file
NAME                   READY   STATUS              RESTARTS   AGE
pod-secrets-via-file   0/1     ContainerCreating   0          10s

[user@console ~]$ kubectl exec pod-secrets-via-file -it -- /bin/bash
root@pod-secrets-via-file:/data# cd /secrets/
root@pod-secrets-via-file:/secrets# ls
Password
root@pod-secrets-via-file:/secrets# cat Password
bobroot@pod-secrets-via-file:/secrets# exit
exit
-> 마운트 되었는지 확인

2.
[user@console ~]$ kubectl run pod-secrets-via-env --image=redis --dry-run=client -o yaml > pod-secrets-via-env.yaml
[user@console ~]$ vi pod-secrets-via-env.yaml
[user@console ~]$ cat pod-secrets-via-env.yaml
apiVersion: v1
kind: Pod
metadata:
  labels:
    run: pod-secrets-via-env
  name: pod-secrets-via-env
spec:
  containers:
  - image: redis
    name: pod-secrets-via-env
    env:
      - name: CONFIDENTIAL
        valueFrom:
          secretKeyRef:
            name: super-secret
            key: Password

[user@console ~]$ kubectl apply -f pod-secrets-via-env.yaml
pod/pod-secrets-via-env created
[user@console ~]$ kubectl get pod pod-secrets-via-env
NAME                  READY   STATUS    RESTARTS   AGE
pod-secrets-via-env   1/1     Running   0          11s
[user@console ~]$ kubectl exec pod-secrets-via-env -it -- /bin/bash
root@pod-secrets-via-env:/data# env
KUBERNETES_SERVICE_PORT_HTTPS=443
KUBERNETES_SERVICE_PORT=443
HOSTNAME=pod-secrets-via-env
REDIS_DOWNLOAD_SHA=67054cc37b58c125df93bd78000261ec0ef4436a26b40f38262c780e56315cc3
PWD=/data
HOME=/root
KUBERNETES_PORT_443_TCP=tcp://10.96.0.1:443
REDIS_VERSION=7.0.5
GOSU_VERSION=1.14
CONFIDENTIAL=bob
TERM=xterm
REDIS_DOWNLOAD_URL=http://download.redis.io/releases/redis-7.0.5.tar.gz
SHLVL=1
KUBERNETES_PORT_443_TCP_PROTO=tcp
KUBERNETES_PORT_443_TCP_ADDR=10.96.0.1
KUBERNETES_SERVICE_HOST=10.96.0.1
KUBERNETES_PORT=tcp://10.96.0.1:443
KUBERNETES_PORT_443_TCP_PORT=443
PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
_=/usr/bin/env
root@pod-secrets-via-env:/data# exit
exit
[user@console ~]$ kubectl get pod | grep pod-secrets-via-
pod-secrets-via-env         1/1     Running   0             6m7s    -> 1
pod-secrets-via-file        1/1     Running   0             26m     -> 2
